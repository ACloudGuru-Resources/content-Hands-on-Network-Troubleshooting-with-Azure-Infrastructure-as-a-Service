{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "10885574943491694837"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "ManagedIdentity",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity'), resourceGroup().id, 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "properties": {
        "description": "Managed identity description",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')).principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity'), resourceGroup().id, 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
      "properties": {
        "description": "Blob Role Assignment",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')).principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[format('st{0}', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "DeploymentScript",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity'))]": {}
        }
      },
      "properties": {
        "forceUpdateTag": "1",
        "azPowerShellVersion": "6.4",
        "scriptContent": "    $RandomNumber = Get-Random -Min 1 -Max 9\n    $ResourceGroup = Get-AzResourceGroup\n    $ResourceGroupName = $ResourceGroup.ResourceGroupName\n    $ResourceGroupLocation = $ResourceGroup.Location\n\n    #Remove a random NSG Rule\n    if ($RandomNumber -gt 5) {\n        $NSG = Get-AzNetworkSecurityGroup -ResourceGroupName $ResourceGroupName \n        $RandomNSGRule = Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $NSG | Where-Object Name -like \"*Allow*\" | Get-Random\n        if ($RandomNSGRule) {\n            $NSG = Remove-AzNetworkSecurityRuleConfig -Name \"$($RandomNSGRule).Name\" -NetworkSecurityGroup $NSG\n            $NSG | Set-AzNetworkSecurityGroup\n        }\n    }\n\n    #Change DNS Servers on a Random NIC\n    if ($RandomNumber -gt 2) {\n        $RandomNIC = Get-AzNetworkInterface -ResourceGroup $ResourceGroupName | Get-Random\n        if ($RandomNIC) {\n            $RandomNIC.DNSSettings.DNSServers.Add('1.0.0.1')                                                       \n            $RandomNIC.DNSSettings.DNSServers.Add('1.1.1.1')                                                       \n            Set-AzNetworkInterface -NetworkInterface $RandomNIC  \n        }\n    }\n\n    #Remove the DNS record\n    if ($RandomNumber -lt 4) {\n        if (Get-AzPrivateDnsRecordSet -ResourceGroupName $ResourceGroupName -ZoneName 'lab.vnet' -Name 'escape'-RecordType A) {\n            Remove-AzPrivateDnsRecordSet -ResourceGroupName $ResourceGroupName -ZoneName 'lab.vnet' -Name 'escape' -RecordType A\n        }\n    }\n\n    #Remove a Vnet Peer\n    if ($RandomNumber -gt 3 -and $RandomNumber -lt 8) {\n        $RandomVNet = Get-AzVirtualNetwork | Get-Random\n        if ($RandomVNet) {\n            $RandomPeer = Get-AzVirtualNetworkPeering -VirtualNetworkName \"$($RandomVNet.Name)\" -ResourceGroupName $ResourceGroupName | Get-Random\n            if ($RandomPeer) {\n                Remove-AzVirtualNetworkPeering -VirtualNetworkName $($RandomPeer.VirtualNetworkName) -Name \"$($RandomPeer.Name)\" -ResourceGroupName $ResourceGroupName -Force\n            }\n        }\n    }\n\n    #Remove the DNS VNet Link\n    if (($RandomNumber % 2) -eq 1) {\n        $RandomDNSLink = Get-AzPrivateDnsVirtualNetworkLink -ResourceGroupName $ResourceGroupName -ZoneName 'lab.vnet' | Get-Random\n        if ($RandomDNSLink) {\n            Remove-AzPrivateDnsVirtualNetworkLink -ResourceGroupName $ResourceGroupName -ZoneName $RandomDNSLink.ZoneName -Name $RandomDNSLink.Name | Out-Null\n        }\n    }\n\n    #Link a Route Table\n    if (($RandomNumber % 2) -eq 0) {\n        $VirtualNetwork = Get-AzVirtualNetwork -Name \"jumpboxvnet\"\n        if ($VirtualNetwork) {\n            $Route = New-AzRouteConfig -Name \"DenyInternet\" -AddressPrefix 0.0.0.0/16 -NextHopType \"None\"\n            $RouteTable = New-AzRouteTable -Name \"DenyInternet\" -ResourceGroupName $ResourceGroupName -Location $ResourceGroupLocation -Route $Route\n            Set-AzVirtualNetworkSubnetConfig -Name \"$($VirtualNetwork.Subnets[0].Name)\" -VirtualNetwork $VirtualNetwork -AddressPrefix \"$($VirtualNetwork.Subnets[0].AddressPrefix)\" -RouteTable $RouteTable | Out-Null\n        }\n    }\n\n    $output = 'Done'\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['text'] = $output\n    ",
        "supportingScriptUris": [],
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "PT1H"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones/A', split('lab.vnet/escape', '/')[0], split('lab.vnet/escape', '/')[1])]",
        "[resourceId('Microsoft.Network/privateDnsZones', 'lab.vnet')]",
        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', 'lab.vnet', 'jumpboxvnet')]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'fileserver1', 'fileserver1-cse')]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'jumpbox1', 'jumpbox1-cse')]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'jumpbox2', 'jumpbox2-cse')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')]",
        "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(format('{0}/peertojumpboxvnet', 'workloadvnet'), '/')[0], split(format('{0}/peertojumpboxvnet', 'workloadvnet'), '/')[1])]",
        "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(format('{0}/peertoworkloadvnet', 'jumpboxvnet'), '/')[0], split(format('{0}/peertoworkloadvnet', 'jumpboxvnet'), '/')[1])]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'webserver1', 'webserver1-cse')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "name": "workloadvnet",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "web-subnet",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-default')]"
              }
            }
          },
          {
            "name": "data-subnet",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-default')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-default')]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "name": "jumpboxvnet",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.1.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "jump-subnet",
            "properties": {
              "addressPrefix": "10.1.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-default')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-default')]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-07-01",
      "name": "[format('{0}/peertojumpboxvnet', 'workloadvnet')]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-07-01",
      "name": "[format('{0}/peertoworkloadvnet', 'jumpboxvnet')]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "lab.vnet",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "lab.vnet/escape",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "10.0.0.80"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'lab.vnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'lab.vnet', 'workloadvnet')]",
      "location": "global",
      "properties": {
        "registrationEnabled": true,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'lab.vnet')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'lab.vnet', 'jumpboxvnet')]",
      "location": "global",
      "properties": {
        "registrationEnabled": true,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'lab.vnet')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-11-01",
      "name": "nsg-default",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow inbound RDP from anywhere to jumpbox virtual network",
            "properties": {
              "description": "Allow inbound RDP from anywhere to jumpbox virtual network",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "destinationAddressPrefix": "10.1.0.0/16",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow inbound SSH from anywhere to jumpbox virtual network",
            "properties": {
              "description": "Allow inbound SSH from anywhere to jumpbox virtual network",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "destinationAddressPrefix": "10.1.0.0/16",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow HTTP traffic from virtual network to web subnet",
            "properties": {
              "description": "Allow HTTP traffic from virtual network to web subnet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "10.0.0.0/24",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow SMB traffic from web subnet to data subnet",
            "properties": {
              "description": "Allow SMB traffic from web subnet to data subnet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "445",
              "sourceAddressPrefix": "10.0.0.0/24",
              "destinationAddressPrefix": "10.0.1.0/24",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "Deny all inbound to virtual networks",
            "properties": {
              "description": "Deny all inbound to virtual networks",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Deny",
              "priority": 4096,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-11-01",
      "name": "jumpbox1pip1",
      "sku": {
        "name": "Standard"
      },
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "jumpbox1nic1",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "jumpbox1nic1ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.1.0.5",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'jumpbox1pip1')]"
              },
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')).subnets[0].id]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'jumpbox1pip1')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "jumpbox1",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_B2s"
        },
        "osProfile": {
          "computerName": "jumpbox1"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2022-datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "jumpbox1osdisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'jumpbox1nic1')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', 'jumpbox1nic1')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', 'jumpbox1', 'jumpbox1-cse')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": [
            "https://raw.githubusercontent.com/ACloudGuru-Resources/content-Hands-on-Network-Troubleshooting-with-Azure-Infrastructure-as-a-Service/master/Lab%2006%20-%20Troubleshooting%20Azure%20Infrastructure%20as%20a%20Service%20(IaaS)%20Networking/Initialize-JumpBox1.ps1"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Bypass -File Initialize-JumpBox1.ps1"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'jumpbox1')]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-11-01",
      "name": "jumpbox2pip1",
      "sku": {
        "name": "Standard"
      },
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "jumpbox2nic1",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "jumpbox1nic1ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.1.0.6",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'jumpbox2pip1')]"
              },
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')).subnets[0].id]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'jumpbox2pip1')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'jumpboxvnet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "jumpbox2",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_B2s"
        },
        "osProfile": {
          "computerName": "jumpbox2"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "name": "jumpbox2osdisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'jumpbox2nic1')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', 'jumpbox2nic1')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-03-01",
      "name": "[format('{0}/{1}', 'jumpbox2', 'jumpbox2-cse')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": [
            "https://raw.githubusercontent.com/ACloudGuru-Resources/content-Hands-on-Network-Troubleshooting-with-Azure-Infrastructure-as-a-Service/master/Lab%2006%20-%20Troubleshooting%20Azure%20Infrastructure%20as%20a%20Service%20(IaaS)%20Networking/Jumpbox2.sh"
          ],
          "commandToExecute": "sh Jumpbox2.sh"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'jumpbox2')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "webserver1nic1",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "webserver1nic1ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.80",
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')).subnets[0].id]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "webserver1",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity'))]": {}
        }
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_B2s"
        },
        "osProfile": {
          "computerName": "webserver1",
          "adminUsername": "DoNotUse",
          "adminPassword": "SuperSecureP@55w0rd"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2022-datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "webserver1osdisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'webserver1nic1')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')]",
        "[resourceId('Microsoft.Network/networkInterfaces', 'webserver1nic1')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', 'webserver1', 'webserver1-cse')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": [
            "https://raw.githubusercontent.com/ACloudGuru-Resources/content-Hands-on-Network-Troubleshooting-with-Azure-Infrastructure-as-a-Service/master/Lab%2006%20-%20Troubleshooting%20Azure%20Infrastructure%20as%20a%20Service%20(IaaS)%20Networking/Initialize-WebServer.ps1"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Bypass -File Initialize-WebServer.ps1"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'webserver1')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "fileserver1nic1",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "fileserver1nic1ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.1.139",
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')).subnets[1].id]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'workloadvnet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "fileserver1",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity'))]": {}
        }
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_B2s"
        },
        "osProfile": {
          "computerName": "fileserver1",
          "adminUsername": "DoNotUse",
          "adminPassword": "SuperSecureP@55w0rd"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2022-datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "fileserver1osdisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'fileserver1nic1')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', 'fileserver1nic1')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ManagedIdentity')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', 'fileserver1', 'fileserver1-cse')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": [
            "https://raw.githubusercontent.com/ACloudGuru-Resources/content-Hands-on-Network-Troubleshooting-with-Azure-Infrastructure-as-a-Service/master/Lab%2006%20-%20Troubleshooting%20Azure%20Infrastructure%20as%20a%20Service%20(IaaS)%20Networking/Initialize-FileServer1.ps1"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Bypass -File Initialize-FileServer1.ps1"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'fileserver1')]"
      ]
    }
  ],
  "outputs": {
    "vmsWithLogin": {
      "type": "array",
      "value": [
        {
          "name": "jumpbox1",
          "showPrivateIp": false,
          "showPublicIp": true,
          "showFqdn": false
        }
      ]
    }
  }
}